# On tags, publish crates to crates.io
# If chrs is to be published, build binaries for multiple platforms and
# create a draft GitGub release.
# chrs also gets published to PyPi.

name: Release

on:
  push:
    tags:
      - "chris/[0-9]+.[0-9]+.[0-9]+*"
      - "v[0-9]+.[0-9]+.[0-9]+*"

env:
  CARGO_TERM_COLOR: always

jobs:

  #################################################
  #                                               #
  #                CRATES.IO BUILD                #
  #                                               #
  #################################################

  crate:
    runs-on: ubuntu-latest
    name: Publish to crates.io
    steps:
      - name: Git checkout
        uses: actions/checkout@v4
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Publish chris (lib)
        if: startsWith( github.ref, 'refs/tags/chris/' )
        run: cargo publish --locked --manifest-path chris/Cargo.toml
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      - name: Publish chrs (bin)
        if: startsWith( github.ref, 'refs/tags/v' )
        run: cargo publish --locked --manifest-path chrs/Cargo.toml
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}


  #################################################
  #                                               #
  #           CROSS COMPILE BINARIES              #
  #                                               #
  #################################################

  # Based on
  # https://github.com/taiki-e/upload-rust-binary-action/blob/cdb45d64fb8498e54ebec23b403b50af20224893/README.md#cross
  # Note: watch this issue for development of better solutions.
  # https://github.com/axodotdev/cargo-dist/issues/74

  create-release:
    runs-on: ubuntu-latest
    if: startsWith( github.ref, 'refs/tags/v' )
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/create-gh-release-action@v1
        with:
          draft: ${{ contains( github.ref, '-' ) }}
          token: ${{ secrets.GITHUB_TOKEN }}

  upload-assets:
    needs: create-release
    strategy:
      matrix:
        include:
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          # Universal macOS binary is supported as universal-apple-darwin.
          - target: universal-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: chrs
          target: ${{ matrix.target }}
          token: ${{ secrets.GITHUB_TOKEN }}

  #################################################
  #                                               #
  #         BUILD FOR PYPI USING MATURIN          #
  #                                               #
  #################################################

  maturin-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64, aarch64, armv7]
    steps:
      - uses: actions/checkout@v4
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --strip --locked --out dist --manifest-path chrs/Cargo.toml
          sccache: 'true'
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: dist

  maturin-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x64]
    steps:
      - uses: actions/checkout@v4
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --strip --locked --out dist --manifest-path chrs/Cargo.toml
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: dist

  maturin-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        target: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v4
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --strip --locked --out dist --manifest-path chrs/Cargo.toml
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: dist

  maturin-sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist --manifest-path chrs/Cargo.toml
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: dist

  maturin-release:
    name: Release
    runs-on: ubuntu-latest
    if: startsWith( github.ref, 'refs/tags/v' )
    needs: [maturin-linux, maturin-windows, maturin-macos, maturin-sdist]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: wheels
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --skip-existing *
