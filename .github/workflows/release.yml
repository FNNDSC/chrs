name: Release

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
jobs:
  crate:
    runs-on: ubuntu-latest
    name: Publish to crates.io
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Setup rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
      - name: Publish chris (lib)
        uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --manifest-path chris/Cargo.toml
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      - name: Publish chrs (cli)
        uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --manifest-path chrs/Cargo.toml
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  # copied from
  # https://github.com/ClementTsang/chrs/blob/d297ee4639f65e9bb1c0c636ebe9faad075822c1/.github/workflows/deployment.yml
  build-release:
    runs-on: ${{ matrix.triple.os }}
    container: ${{ matrix.triple.container }}
    env:
      RUST_BACKTRACE: 1
    strategy:
      fail-fast: false
      matrix:
        triple:
          # Standard x86-64 stuff, stable
          - {
            os: "ubuntu-18.04",
            target: "x86_64-unknown-linux-gnu",
            cross: false,
          }
          - {
            os: "ubuntu-18.04",
            target: "x86_64-unknown-linux-gnu",
            cross: false,
            container: quay.io/pypa/manylinux2014_x86_64,
            suffix: "2-17",
          }
          - {
            os: "ubuntu-18.04",
            target: "i686-unknown-linux-gnu",
            cross: true,
          }
          - {
            os: "ubuntu-18.04",
            target: "x86_64-unknown-linux-musl",
            cross: false,
          }
          - {
            os: "ubuntu-18.04",
            target: "i686-unknown-linux-musl",
            cross: true,
          }
          - { os: "macOS-latest", target: "x86_64-apple-darwin", cross: false }
          - {
            os: "windows-2019",
            target: "x86_64-pc-windows-msvc",
            cross: false,
          }
          - {
            os: "windows-2019",
            target: "x86_64-pc-windows-gnu",
            cross: false,
          }

          # aarch64
          - {
            os: "ubuntu-18.04",
            target: "aarch64-unknown-linux-gnu",
            cross: true,
          }

          # armv7
          - {
            os: "ubuntu-18.04",
            target: "armv7-unknown-linux-gnueabihf",
            cross: true,
          }

          # PowerPC 64 LE
          - {
            os: "ubuntu-18.04",
            target: "powerpc64le-unknown-linux-gnu",
            cross: true,
          }

          # Risc-V 64gc
          - {
            os: "ubuntu-18.04",
            target: "riscv64gc-unknown-linux-gnu",
            cross: true,
          }

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Install toolchain
        uses: actions-rs/toolchain@88dc2356392166efad76775c878094f4e83ff746
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.triple.target }}

      - uses: Swatinem/rust-cache@842ef286fff290e445b90b4002cc9807c3669641  # 1.3.0
        with:
          key: ${{ matrix.triple.target }}

      - name: Build (vendored OpenSSL)
        if: matrix.triple.container || matrix.triple.cross || endsWith( matrix.triple.target, '-linux-musl' )
        id: build_vendored_openssl
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --verbose --target=${{ matrix.triple.target }} --manifest-path chrs/Cargo.toml --features vendored-openssl
          use-cross: ${{ matrix.triple.cross }}
      - name: Build (dynamically-linked OpenSSL)
        if: steps.build_vendored_openssl.conclusion == 'skipped'
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --verbose --target=${{ matrix.triple.target }} --manifest-path chrs/Cargo.toml
          use-cross: ${{ matrix.triple.cross }}

      - name: Bundle release (Windows)
        if: matrix.triple.os == 'windows-2019'
        shell: bash
        run: |
          cp target/${{ matrix.triple.target }}/release/chrs.exe chrs.exe
          7z a chrs_${{ matrix.triple.target }}.zip "chrs.exe"
          echo "ASSET=chrs_${{ matrix.triple.target }}.zip" >> $GITHUB_ENV
      - name: Bundle release (Linux and macOS)
        if: matrix.triple.os != 'windows-2019'
        shell: bash
        run: |
          cp target/${{ matrix.triple.target }}/release/chrs ./chrs
          tar -czvf chrs_${{ matrix.triple.target }}${{ matrix.triple.suffix }}.tar.gz chrs
          echo "ASSET=chrs_${{ matrix.triple.target }}${{ matrix.triple.suffix }}.tar.gz" >> $GITHUB_ENV
      - name: Create release directory for artifact, move file
        shell: bash
        run: |
          mkdir -v release
          mv -v ${{ env.ASSET }} release/
      - name: Save release as artifact
        uses: actions/upload-artifact@v2
        with:
          retention-days: 3
          name: release
          path: release

  build-deb:
    name: build-deb
    runs-on: "ubuntu-18.04"
    env:
      RUST_BACKTRACE: 1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Install toolchain
        uses: actions-rs/toolchain@88dc2356392166efad76775c878094f4e83ff746
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: x86_64-unknown-linux-gnu

      - uses: Swatinem/rust-cache@842ef286fff290e445b90b4002cc9807c3669641 # 1.3.0
        with:
          key: x86_64-unknown-linux-gnu-deb

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --verbose --manifest-path chrs/Cargo.toml

      - name: Build Debian release
        run: |
          cargo install cargo-deb --version 1.37.0 --locked
          cargo deb --no-build -p chrs
          cp -v ./target/debian/*.deb ./
      - name: Test Debian release
        run: sudo dpkg -i ./*.deb

      - name: Create release directory for artifact, move file
        shell: bash
        run: |
          mkdir -v release
          mv -v ./*.deb release/
      - name: Save release as artifact
        uses: actions/upload-artifact@v2
        with:
          retention-days: 3
          name: release
          path: release

  upload-release:
    name: upload-release
    runs-on: ubuntu-latest
    needs: [build-release, build-deb]
    steps:
      - name: Get release artifacts
        uses: actions/download-artifact@v2
        with:
          name: release
          path: release

      - name: Print out all release files
        run: |
          echo "Generated $(ls ./release | wc -l) files:"
          ls ./release
      - name: Upload all saved release files
        uses: softprops/action-gh-release@17cd0d34deddf848fc0e7d9be5202c148c270a0a
        with:
          draft: true
          fail_on_unmatched_files: true
          files: |
            ./release/*
